// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.language.authoring;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.language.authoring.implementation.DeploymentsImpl;
import com.azure.language.authoring.models.Deployment;
import com.azure.language.authoring.models.SwapDeploymentsOptions;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous MicrosoftCognitiveLanguageServiceAnalyzeTextAuthoringClient type. */
@ServiceClient(builder = DeploymentsClientBuilder.class, isAsync = true)
public final class DeploymentsAsyncClient {
    @Generated private final DeploymentsImpl serviceClient;

    /**
     * Initializes an instance of DeploymentsAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    DeploymentsAsyncClient(DeploymentsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets the details of a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a deployment along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentWithResponse(
            String projectName, String deploymentName, RequestOptions requestOptions) {
        return this.serviceClient.getDeploymentWithResponseAsync(projectName, deploymentName, requestOptions);
    }

    /**
     * Creates a new deployment or replaces an existing one.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deployProjectWithResponse(
            String projectName, String deploymentName, RequestOptions requestOptions) {
        return this.serviceClient.deployProjectWithResponseAsync(projectName, deploymentName, requestOptions);
    }

    /**
     * Deletes a project deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteDeploymentWithResponse(
            String projectName, String deploymentName, RequestOptions requestOptions) {
        return this.serviceClient.deleteDeploymentWithResponseAsync(projectName, deploymentName, requestOptions);
    }

    /**
     * Lists the existing deployments.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             name: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Deployment items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listAsync(projectName, requestOptions);
    }

    /**
     * Swaps two existing deployments with each other.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     firstDeploymentName: String (Required)
     *     secondDeploymentName: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param body The body schema of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> swapDeploymentsWithResponse(
            String projectName, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.swapDeploymentsWithResponseAsync(projectName, body, requestOptions);
    }

    /*
     * Generated convenience method for getDeploymentWithResponse
     */
    /**
     * Gets the details of a deployment.
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a deployment on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> getDeployment(String projectName, String deploymentName) {
        RequestOptions requestOptions = new RequestOptions();
        return getDeploymentWithResponse(projectName, deploymentName, requestOptions)
                .map(Response::getValue)
                .map(protocolMethodData -> protocolMethodData.toObject(Deployment.class));
    }

    /*
     * Generated convenience method for deployProjectWithResponse
     */
    /**
     * Creates a new deployment or replaces an existing one.
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> deployProject(String projectName, String deploymentName) {
        RequestOptions requestOptions = new RequestOptions();
        return deployProjectWithResponse(projectName, deploymentName, requestOptions)
                .map(Response::getValue)
                .map(protocolMethodData -> protocolMethodData.toObject(Deployment.class));
    }

    /*
     * Generated convenience method for deleteDeploymentWithResponse
     */
    /**
     * Deletes a project deployment.
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> deleteDeployment(String projectName, String deploymentName) {
        RequestOptions requestOptions = new RequestOptions();
        return deleteDeploymentWithResponse(projectName, deploymentName, requestOptions)
                .map(Response::getValue)
                .map(protocolMethodData -> protocolMethodData.toObject(Deployment.class));
    }

    /*
     * Generated convenience method for swapDeploymentsWithResponse
     */
    /**
     * Swaps two existing deployments with each other.
     *
     * @param projectName The projectName parameter.
     * @param body The body schema of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> swapDeployments(String projectName, SwapDeploymentsOptions body) {
        RequestOptions requestOptions = new RequestOptions();
        return swapDeploymentsWithResponse(projectName, BinaryData.fromObject(body), requestOptions)
                .map(Response::getValue);
    }
}
