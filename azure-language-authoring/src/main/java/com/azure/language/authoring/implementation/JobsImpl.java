// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.language.authoring.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Jobs. */
public final class JobsImpl {
    /** The proxy service used to perform REST calls. */
    private final JobsService service;

    /** The service client containing this operation class. */
    private final MicrosoftCognitiveLanguageServiceAnalyzeTextAuthoringClientImpl client;

    /**
     * Initializes an instance of JobsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    JobsImpl(MicrosoftCognitiveLanguageServiceAnalyzeTextAuthoringClientImpl client) {
        this.service = RestProxy.create(JobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftCognitiveLanguageServiceAnalyzeTextAuthoringJobs to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/language")
    @ServiceInterface(name = "MicrosoftCognitiveLa")
    private interface JobsService {
        @Get("/authoring/analyze-text/projects/{projectName}/deployments/{deploymentName}/jobs/{jobId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentStatus(
                @HostParam("Endpoint") String endpoint,
                @PathParam("projectName") String projectName,
                @PathParam("deploymentName") String deploymentName,
                @PathParam("jobId") String jobId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/authoring/analyze-text/projects/{projectName}/deployments/{deploymentName}/swap/jobs/{jobId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSwapDeploymentsStatus(
                @HostParam("Endpoint") String endpoint,
                @PathParam("projectName") String projectName,
                @PathParam("deploymentName") String deploymentName,
                @PathParam("jobId") String jobId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Gets the status of an existing deployment job.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: String (Required)
     *     lastUpdatedDateTime: String (Required)
     *     expirationDateTime: String (Required)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Required): [
     *          (Required){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors: ResponseError (Required)
     *     id: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @param jobId The jobId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing deployment job along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentStatusWithResponseAsync(
            String projectName, String deploymentName, String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeploymentStatus(
                                this.client.getEndpoint(),
                                projectName,
                                deploymentName,
                                jobId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the status of an existing deployment job.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: String (Required)
     *     lastUpdatedDateTime: String (Required)
     *     expirationDateTime: String (Required)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Required): [
     *          (Required){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors: ResponseError (Required)
     *     id: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @param jobId The jobId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing deployment job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentStatusWithResponse(
            String projectName, String deploymentName, String jobId, RequestOptions requestOptions) {
        return getDeploymentStatusWithResponseAsync(projectName, deploymentName, jobId, requestOptions).block();
    }

    /**
     * Gets the status of an existing swap deployment job.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: String (Required)
     *     lastUpdatedDateTime: String (Required)
     *     expirationDateTime: String (Required)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Required): [
     *          (Required){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors: ResponseError (Required)
     *     id: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @param jobId The jobId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing swap deployment job along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSwapDeploymentsStatusWithResponseAsync(
            String projectName, String deploymentName, String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getSwapDeploymentsStatus(
                                this.client.getEndpoint(),
                                projectName,
                                deploymentName,
                                jobId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the status of an existing swap deployment job.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: String (Required)
     *     lastUpdatedDateTime: String (Required)
     *     expirationDateTime: String (Required)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Required): [
     *          (Required){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors: ResponseError (Required)
     *     id: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param deploymentName The deploymentName parameter.
     * @param jobId The jobId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing swap deployment job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSwapDeploymentsStatusWithResponse(
            String projectName, String deploymentName, String jobId, RequestOptions requestOptions) {
        return getSwapDeploymentsStatusWithResponseAsync(projectName, deploymentName, jobId, requestOptions).block();
    }
}
