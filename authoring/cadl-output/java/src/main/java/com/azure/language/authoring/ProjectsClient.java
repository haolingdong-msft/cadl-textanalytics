// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.language.authoring;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.ResponseBase;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.language.authoring.models.Project;
import com.azure.language.authoring.models.ProjectsCreateOrUpdateHeaders;

/** Initializes a new instance of the synchronous MicrosoftCognitiveLanguageServiceAnalyzeTextAuthoringClient type. */
@ServiceClient(builder = ProjectsClientBuilder.class)
public final class ProjectsClient {
    @Generated private final ProjectsAsyncClient client;

    /**
     * Initializes an instance of ProjectsClient class.
     *
     * @param client the async client.
     */
    @Generated
    ProjectsClient(ProjectsAsyncClient client) {
        this.client = client;
    }

    /**
     * Creates a new project or updates an existing one.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     projectName: String (Required)
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition) (Required)
     *     storageInputContainerName: String (Required)
     *     settings (Optional): {
     *         String: String (Optional)
     *     }
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     *     createdDateTime: String (Required)
     *     lastModifiedDateTime: String (Required)
     *     lastTrainedDateTime: String (Required)
     *     lastDeployedDateTime: String (Required)
     *     operationLocation: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String projectName, RequestOptions requestOptions) {
        return this.client.createOrUpdateWithResponse(projectName, requestOptions).block();
    }

    /**
     * Gets the details of a project.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     projectName: String (Required)
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition) (Required)
     *     storageInputContainerName: String (Required)
     *     settings (Optional): {
     *         String: String (Optional)
     *     }
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     *     createdDateTime: String (Required)
     *     lastModifiedDateTime: String (Required)
     *     lastTrainedDateTime: String (Required)
     *     lastDeployedDateTime: String (Required)
     *     operationLocation: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a project along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String projectName, RequestOptions requestOptions) {
        return this.client.getWithResponse(projectName, requestOptions).block();
    }

    /**
     * Deletes a project.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     projectName: String (Required)
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition) (Required)
     *     storageInputContainerName: String (Required)
     *     settings (Optional): {
     *         String: String (Optional)
     *     }
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     *     createdDateTime: String (Required)
     *     lastModifiedDateTime: String (Required)
     *     lastTrainedDateTime: String (Required)
     *     lastDeployedDateTime: String (Required)
     *     operationLocation: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteWithResponse(String projectName, RequestOptions requestOptions) {
        return this.client.deleteWithResponse(projectName, requestOptions).block();
    }

    /**
     * Lists the existing projects.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>top</td><td>Long</td><td>No</td><td>The top parameter</td></tr>
     *     <tr><td>skip</td><td>Long</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Long</td><td>No</td><td>The maxPageSize parameter</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             projectName: String (Required)
     *             projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition) (Required)
     *             storageInputContainerName: String (Required)
     *             settings (Optional): {
     *                 String: String (Optional)
     *             }
     *             multilingual: Boolean (Optional)
     *             description: String (Optional)
     *             language: String (Required)
     *             createdDateTime: String (Required)
     *             lastModifiedDateTime: String (Required)
     *             lastTrainedDateTime: String (Required)
     *             lastDeployedDateTime: String (Required)
     *             operationLocation: String (Required)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Project items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(requestOptions));
    }

    /**
     * Triggers a job to export a project's data.
     *
     * @param projectName The projectName parameter.
     * @param projectFileVersion The projectFileVersion parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> exportWithResponse(
            String projectName, String projectFileVersion, RequestOptions requestOptions) {
        return this.client.exportWithResponse(projectName, projectFileVersion, requestOptions).block();
    }

    /**
     * Triggers a job to export a project's data.
     *
     * @param projectName The projectName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> importxWithResponse(String projectName, RequestOptions requestOptions) {
        return this.client.importxWithResponse(projectName, requestOptions).block();
    }

    /**
     * Triggers a training job for a project.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     modelLabel: String (Required)
     * }
     * }</pre>
     *
     * @param projectName The projectName parameter.
     * @param body Training job parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> trainWithResponse(String projectName, BinaryData body, RequestOptions requestOptions) {
        return this.client.trainWithResponse(projectName, body, requestOptions).block();
    }

    /*
     * Generated convenience method for createOrUpdateWithResponse
     */
    /**
     * Creates a new project or updates an existing one.
     *
     * @param projectName The projectName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Project createOrUpdate(String projectName) {
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateWithResponse(projectName, requestOptions).getValue().toObject(Project.class);
    }

    /*
     * Generated convenience method for createOrUpdateWithResponse
     */
    /**
     * Creates a new project or updates an existing one.
     *
     * @param projectName The projectName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link ResponseBase}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<ProjectsCreateOrUpdateHeaders, Project> createOrUpdateWithResponse(
            String projectName, Context context) {
        RequestOptions requestOptions = new RequestOptions();
        requestOptions.setContext(context);
        Response<BinaryData> protocolMethodResponse = createOrUpdateWithResponse(projectName, requestOptions);
        return new ResponseBase<>(
                protocolMethodResponse.getRequest(),
                protocolMethodResponse.getStatusCode(),
                protocolMethodResponse.getHeaders(),
                protocolMethodResponse.getValue().toObject(Project.class),
                new ProjectsCreateOrUpdateHeaders(protocolMethodResponse.getHeaders()));
    }
}
